// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vrap.Database;

#nullable disable

namespace Vrap.Database.Migrations
{
    [DbContext(typeof(VrapDbContext))]
    partial class VrapDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.DataTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("DataTables");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.EnumOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("EnumOptions");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.TableField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordinal")
                        .HasColumnType("integer");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableFields");

                    b.HasDiscriminator<int>("FieldType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.DataEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TableId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("DataEntries");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.FieldEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EntryId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<int>("TableFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.HasIndex("TableFieldId");

                    b.ToTable("FieldEntries");

                    b.HasDiscriminator<int>("FieldType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.DateTimeField", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Configuration.TableField");

                    b.Property<DateTimeOffset?>("MaxValue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("MinValue")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("TableFields", t =>
                        {
                            t.Property("MaxValue")
                                .HasColumnName("DateTimeField_MaxValue");

                            t.Property("MinValue")
                                .HasColumnName("DateTimeField_MinValue");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.EnumField", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Configuration.TableField");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.NumberField", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Configuration.TableField");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinValue")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.StringField", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Configuration.TableField");

                    b.Property<int>("MaxLength")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.DateTimeEntry", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Entries.FieldEntry");

                    b.Property<DateTimeOffset>("Value")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.EnumEntry", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Entries.FieldEntry");

                    b.Property<int>("ValueId")
                        .HasColumnType("integer");

                    b.HasIndex("ValueId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.NumberEntry", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Entries.FieldEntry");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.ToTable("FieldEntries", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("NumberEntry_Value");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.StringEntry", b =>
                {
                    b.HasBaseType("Vrap.Database.LifeLog.Entries.FieldEntry");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.ToTable("FieldEntries", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("StringEntry_Value");
                        });

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.EnumOption", b =>
                {
                    b.HasOne("Vrap.Database.LifeLog.Configuration.EnumField", "Field")
                        .WithMany("Options")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.TableField", b =>
                {
                    b.HasOne("Vrap.Database.LifeLog.Configuration.DataTable", "Table")
                        .WithMany("Fields")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.DataEntry", b =>
                {
                    b.HasOne("Vrap.Database.LifeLog.Configuration.DataTable", "Table")
                        .WithMany("Entries")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.FieldEntry", b =>
                {
                    b.HasOne("Vrap.Database.LifeLog.Entries.DataEntry", "Entry")
                        .WithMany("FieldEntries")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vrap.Database.LifeLog.Configuration.TableField", "TableField")
                        .WithMany()
                        .HasForeignKey("TableFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("TableField");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.EnumEntry", b =>
                {
                    b.HasOne("Vrap.Database.LifeLog.Configuration.EnumOption", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.DataTable", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Entries.DataEntry", b =>
                {
                    b.Navigation("FieldEntries");
                });

            modelBuilder.Entity("Vrap.Database.LifeLog.Configuration.EnumField", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
